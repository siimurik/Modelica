#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
       5                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
      10                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(44,25)
fixed.s0
fixed.flange.f
springDamper1.stateSelect
springDamper1.s_nominal
springDamper1.s_rel
springDamper1.der(s_rel)
springDamper1.v_rel
springDamper1.der(v_rel)
springDamper1.flange_b.s
springDamper1.c
springDamper1.d
springDamper1.s_rel0
springDamper1.useHeatPort
springDamper1.lossPower
springDamper1.f_c
springDamper1.f_d
springDamper2.stateSelect
springDamper2.s_nominal
springDamper2.s_rel
springDamper2.der(s_rel)
springDamper2.v_rel
springDamper2.der(v_rel)
springDamper2.f
springDamper2.flange_a.s
springDamper2.flange_b.s
springDamper2.c
springDamper2.d
springDamper2.s_rel0
springDamper2.useHeatPort
springDamper2.lossPower
springDamper2.f_c
springDamper2.f_d
mass1.m
mass1.stateSelect
mass1.s
mass1.L
mass2.m
mass2.stateSelect
mass2.s
mass2.L
mass2.flange_b.s
mass2.flange_b.f
mass2.v
mass2.der(v)

double initialValue(44,6)
 -1       0                  0       0                  1   280   # fixed.s0
 -2 -9.7692118467927109E+00  0       0                  6   388   # fixed.flange.f
 -2       4                  1       5                  6   770   # springDamper1.stateSelect
 -2  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # springDamper1.s_nominal
 -2 -3.5327951171523447E-03  0       0                  2   280   # springDamper1.s_rel
 -2  2.7639116822144129E-02  0       0                  3   256   # springDamper1.der(s_rel)
 -2  2.7639116822144129E-02  0       0                  2   280   # springDamper1.v_rel
 -2  2.4257960173789428E-01  0       0                  3   256   # springDamper1.der(v_rel)
 -2 -3.5327951171523447E-03  0       0                  6   260   # springDamper1.flange_b.s
 -1    3000                  0 1.0000000000000000E+100  1   280   # springDamper1.c
 -1      30                  0 1.0000000000000000E+100  1   280   # springDamper1.d
 -1       0                  0       0                  1   280   # springDamper1.s_rel0
 -2       0                  0       0                  6   769   # springDamper1.useHeatPort
 -2  2.2917623361243915E-02  0       0                  6   256   # springDamper1.lossPower
 -2 -1.0598385351457035E+01  0       0                  6  1280   # springDamper1.f_c
 -2  8.2917350466432382E-01  0       0                  6  1280   # springDamper1.f_d
 -2       4                  1       5                  6   770   # springDamper2.stateSelect
 -2  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # springDamper2.s_nominal
 -2 -1.0334942481863231E-02  0       0                  2   280   # springDamper2.s_rel
 -2  8.0831023680841427E-02  0       0                  3   256   # springDamper2.der(s_rel)
 -2  8.0831023680841427E-02  0       0                  2   280   # springDamper2.v_rel
 -2  7.1008362276758741E-01  0       0                  3   256   # springDamper2.der(v_rel)
 -2 -9.5266322450548167E+00  0       0                  6   256   # springDamper2.f
 -2 -3.5327951171523447E-03  0       0                  6   260   # springDamper2.flange_a.s
 -2 -1.3867737599015576E-02  0       0                  6   260   # springDamper2.flange_b.s
 -1    1000                  0 1.0000000000000000E+100  1   280   # springDamper2.c
 -1      10                  0 1.0000000000000000E+100  1   280   # springDamper2.d
 -1       0                  0       0                  1   280   # springDamper2.s_rel0
 -2       0                  0       0                  6   769   # springDamper2.useHeatPort
 -2  6.5336543892927479E-02  0       0                  6   256   # springDamper2.lossPower
 -2 -1.0334942481863232E+01  0       0                  6  1280   # springDamper2.f_c
 -2  8.0831023680841430E-01  0       0                  6  1280   # springDamper2.f_d
 -1       1                  0 1.0000000000000000E+100  1   280   # mass1.m
 -2       3                  1       5                  6   258   # mass1.stateSelect
 -2 -3.5327951171523447E-03  0       0                  6   256   # mass1.s
 -1       0                  0       0                  1   280   # mass1.L
 -1      10                  0 1.0000000000000000E+100  1   280   # mass2.m
 -2       3                  1       5                  6   258   # mass2.stateSelect
 -2 -1.3867737599015576E-02  0       0                  6   256   # mass2.s
 -1       0                  0       0                  1   280   # mass2.L
 -2 -1.3867737599015576E-02  0       0                  6   260   # mass2.flange_b.s
 -2       0                  0       0                  6   388   # mass2.flange_b.f
 -2  1.0847014050298556E-01  0       0                  6   256   # mass2.v
 -2  9.5266322450548169E-01  0       0                  6   256   # mass2.der(v)


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, the initialization is performed in the normal way.
#
# - If parameters and inputs are FIXED, and all other variables
#   have special case for continue (-2 in 1st column), or FREE
#   the initialization is ignored and variables are set to these values.
#   This is intended to continue the simulation.
#
#   Which variables will be important for initialization and continue
#   is indicated by value in column 6 & dsStartMasks.
#
char initialDescription(44,88)
Fixed offset position of housing [m]
Cut force directed into flange [N]
Priority to use s_rel and v_rel as states [:#(type=StateSelect)]
Nominal value of s_rel (used for scaling) [m]
Relative distance (= flange_b.s - flange_a.s) [m]
der(Relative distance (= flange_b.s - flange_a.s)) [m/s]
Relative velocity (= der(s_rel)) [m/s]
der(Relative velocity (= der(s_rel))) [m/s2]
Absolute position of flange [m]
Spring constant [N/m]
Damping constant [N.s/m]
Unstretched spring length [m]
= true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
Spring force [N]
Damping force [N]
Priority to use s_rel and v_rel as states [:#(type=StateSelect)]
Nominal value of s_rel (used for scaling) [m]
Relative distance (= flange_b.s - flange_a.s) [m]
der(Relative distance (= flange_b.s - flange_a.s)) [m/s]
Relative velocity (= der(s_rel)) [m/s]
der(Relative velocity (= der(s_rel))) [m/s2]
Forces between flanges (= flange_b.f) [N]
Absolute position of flange [m]
Absolute position of flange [m]
Spring constant [N/m]
Damping constant [N.s/m]
Unstretched spring length [m]
= true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
Spring force [N]
Damping force [N]
Mass of the sliding mass [kg]
Priority to use s and v as states [:#(type=StateSelect)]
Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2) [m]
Length of component, from left flange to right flange (= flange_b.s - flange_a.s) [m]
Mass of the sliding mass [kg]
Priority to use s and v as states [:#(type=StateSelect)]
Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2) [m]
Length of component, from left flange to right flange (= flange_b.s - flange_a.s) [m]
Absolute position of flange [m]
Cut force directed into flange [N]
Absolute velocity of component [m/s]
der(Absolute velocity of component) [m/s2]

