within ;
model MultiDomainControl
  annotation (
    Icon(coordinateSystem(preserveAspectRatio=false)),
    Diagram(coordinateSystem(preserveAspectRatio=false)),
    __Dymola_DymolaStoredErrors(thetext="within ModelicaByExample.Components.BlockDiagrams.Examples;
model MultiDomainControl
  \"Mixing thermal components with blocks for sensing, actuation and control\"

  import Modelica.SIunits.Conversions.from_degC;

  parameter Real h = 0.7 \"Convection coefficient\";
  parameter Real A = 1.0 \"Area\";
  parameter Real m = 0.1 \"Thermal maass\";
  parameter Real c_p = 1.2 \"Specific heat\";
  parameter Real T_inf = from_degC(25) \"Ambient temperature\";
  parameter Real T_bar = from_degC(30.0) \"Desired temperature\";
  parameter Real k = 2.0 \"Controller gain\";

  Components.Constant setpoint(k=T_bar)
    annotation ...
  Components.Feedback feedback
    annotation ...
  Components.Gain controller_gain(k=k) \"Gain for the proportional control\"
    annotation ...
  HeatTransfer.ThermalCapacitance cap(C=m*c_p, T0 = from_degC(90))
    \"Thermal capacitance component\"
    annotation ...
  HeatTransfer.Convection convection2(h=h, A=A)
    annotation ...
  HeatTransfer.AmbientCondition
                   amb(T_amb(displayUnit=\"K\") = T_inf)
    annotation ...
  Components.IdealTemperatureSensor sensor annotation ...
  Components.HeatSource heatSource
    annotation ...
equation
  connect(setpoint.y, feedback.u1) annotation ...
  connect(feedback.y, controller_gain.u) annotation ...
  connect(convection2.port_a, cap.node) annotation ...
  connect(amb.node, convection2.port_b) annotation ...
  connect(sensor.y, feedback.u2) annotation ...
  connect(heatSource.node, cap.node) annotation ...
  connect(controller_gain.y, heatSource.u) annotation ...
  connect(sensor.node, cap.node) annotation ...
end MultiDomainControl;"));
end MultiDomainControl;
